// File: ai_chat.js

// Khai b√°o c√°c bi·∫øn v√† h·∫±ng s·ªë
const aiChatWindow = document.getElementById('aiChatWindow');
const aiChatOverlay = document.getElementById('aiChatOverlay');
const aiStatus = document.getElementById('aiStatus');
const geminiApiKeyInput = document.getElementById('geminiApiKeyInput');
const apiKeyInputWrapper = document.getElementById('apiKeyInputWrapper');
let geminiApiKey = localStorage.getItem('geminiApiKey') || '';
let isListening = false;


// --- H√†m qu·∫£n l√Ω c·ª≠a s·ªï Chat AI ---
function openAIChatWindow() {
    aiChatWindow.style.display = 'block';
    aiChatOverlay.style.display = 'block';
    
    // Ki·ªÉm tra v√† hi·ªÉn th·ªã √¥ nh·∫≠p API Key n·∫øu ch∆∞a c√≥
    if (!geminiApiKey) {
        apiKeyInputWrapper.style.display = 'block';
        aiStatus.textContent = "Vui l√≤ng nh·∫≠p API Key ƒë·ªÉ b·∫Øt ƒë·∫ßu.";
    } else {
        apiKeyInputWrapper.style.display = 'none';
        aiStatus.textContent = "S·∫µn s√†ng nghe l·ªánh.";
    }
}

function closeAIChatWindow() {
    aiChatWindow.style.display = 'none';
    aiChatOverlay.style.display = 'none';
    
    // T·∫Øt l·∫Øng nghe n·∫øu ƒëang ho·∫°t ƒë·ªông
    if (window.recognition) {
        window.recognition.stop();
        isListening = false;
        aiStatus.textContent = "S·∫µn s√†ng nghe l·ªánh.";
    }
}

function saveApiKey() {
    geminiApiKey = geminiApiKeyInput.value.trim();
    if (geminiApiKey) {
        localStorage.setItem('geminiApiKey', geminiApiKey);
        apiKeyInputWrapper.style.display = 'none';
        aiStatus.textContent = "ƒê√£ l∆∞u API Key. B·∫•m B·∫Øt ƒë·∫ßu n√≥i.";
        // T·ª± ƒë·ªông ƒë√≥ng c·ª≠a s·ªï sau khi l∆∞u th√†nh c√¥ng (t√πy ch·ªçn)
        // setTimeout(closeAIChatWindow, 1500); 
    } else {
        alert("Vui l√≤ng nh·∫≠p API Key.");
    }
}


// --- H√†m G·ªçi API v√† Nh·∫≠n d·∫°ng Gi·ªçng n√≥i ---

// H√†m g·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini API
async function askGemini(question) {
    if (!geminiApiKey) {
        aiStatus.textContent = "L·ªói: Ch∆∞a c√≥ Gemini API Key!";
        apiKeyInputWrapper.style.display = 'block';
        return "Xin l·ªói, t√¥i ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng nh·∫≠p API Key.";
    }

    const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=" + geminiApiKey;
    
    // T·∫°o prompt ƒë∆°n gi·∫£n cho chatbot ti·∫øng Vi·ªát
    const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω gi·ªçng n√≥i th√¢n thi·ªán. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau b·∫±ng Ti·∫øng Vi·ªát m·ªôt c√°ch ng·∫Øn g·ªçn, s√∫c t√≠ch (d∆∞·ªõi 50 t·ª´): "${question}"`;

    const requestBody = {
        contents: [{
            role: "user",
            parts: [{
                text: prompt
            }]
        }]
    };

    try {
        aiStatus.textContent = "ƒêang suy nghƒ© v√† t·∫°o c√¢u tr·∫£ l·ªùi...";
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });

        const data = await response.json();

        if (data.candidates && data.candidates.length > 0) {
            return data.candidates[0].content.parts[0].text.trim();
        } else if (data.error) {
            console.error("Gemini API Error:", data.error.message);
            aiStatus.textContent = "L·ªói API: Vui l√≤ng ki·ªÉm tra l·∫°i Key.";
            apiKeyInputWrapper.style.display = 'block';
            return "ƒê√£ x·∫£y ra l·ªói k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng ki·ªÉm tra l·∫°i API Key.";
        }
        
        return "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n.";

    } catch (error) {
        console.error("Fetch Error:", error);
        aiStatus.textContent = "L·ªói m·∫°ng ho·∫∑c k·∫øt n·ªëi!";
        return "ƒê√£ x·∫£y ra l·ªói m·∫°ng.";
    }
}

// H√†m l·∫Øng nghe gi·ªçng n√≥i v√† g·ªçi AI
function startListeningAndAsk(event) {
    if (event) event.preventDefault();
    
    if (isListening) {
        // N·∫øu ƒëang nghe, ch·∫°m l·∫ßn n·ªØa s·∫Ω d·ª´ng (optional)
        if (window.recognition) window.recognition.stop();
        return;
    }

    if (!('webkitSpeechRecognition' in window)) {
        aiStatus.textContent = "Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i!";
        return;
    }
    
    if (!geminiApiKey) {
        aiStatus.textContent = "Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc!";
        apiKeyInputWrapper.style.display = 'block';
        return;
    }

    // T·∫Øt m·ªçi ph√°t √¢m TTS ƒëang di·ªÖn ra (s·ª≠ d·ª•ng h√†m t·ª´ script ch√≠nh)
    if (speechSynthesis.speaking) {
        speechSynthesis.cancel();
    }
    
    isListening = true;
    aiStatus.textContent = "üé§ ƒêang l·∫Øng nghe... H√£y n√≥i!";

    window.recognition = new webkitSpeechRecognition();
    recognition.lang = 'vi-VN'; 
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.onresult = async function(event) {
        const last = event.results.length - 1;
        const question = event.results[last][0].transcript;
        
        isListening = false;
        aiStatus.textContent = "B·∫°n n√≥i: " + question;

        // B∆∞·ªõc 2: G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini
        const answer = await askGemini(question);

        // B∆∞·ªõc 3: Ph√°t √¢m c√¢u tr·∫£ l·ªùi (s·ª≠ d·ª•ng h√†m t·ª´ script ch√≠nh)
        if (typeof speak === 'function') {
             speak(answer);
        } else {
             aiStatus.textContent = "AI tr·∫£ l·ªùi: " + answer;
        }
        
        // Sau khi ho√†n t·∫•t, chuy·ªÉn v·ªÅ tr·∫°ng th√°i ch·ªù
        setTimeout(() => { aiStatus.textContent = "S·∫µn s√†ng nghe l·ªánh."; }, 4000);
    };

    recognition.onerror = function(event) {
        isListening = false;
        aiStatus.textContent = "L·ªói nghe: " + event.error + ". Th·ª≠ l·∫°i.";
        console.error("Speech Recognition Error:", event.error);
    };
    
    recognition.onend = function() {
        // ƒê·∫£m b·∫£o tr·∫°ng th√°i l·∫Øng nghe ƒë∆∞·ª£c reset n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
        if (isListening) {
             isListening = false;
             aiStatus.textContent = "Kh√¥ng nghe ƒë∆∞·ª£c g√¨. Th·ª≠ l·∫°i.";
             setTimeout(() => { aiStatus.textContent = "S·∫µn s√†ng nghe l·ªánh."; }, 2000);
        }
    }

    recognition.start();
}
